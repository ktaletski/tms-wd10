String()
Number()
Boolean()
Symbol()
BigInt()


const num = new Number(0);

typeof num; // object (!)


const str = '–ü—Ä–∏–≤–µ—Ç';

str.toUpperCase(); // –ü–†–ò–í–ï–¢

// (–Ω–µ—è–≤–Ω–æ)
let tempStr = new String(str); // —Å–æ–∑–¥–∞—ë—Ç—Å—è –æ–±—ä–µ–∫—Ç-–æ–±—ë—Ä—Ç–∫–∞
tempStr.toUpperCase(); // –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –º–µ—Ç–æ–¥ –æ–±—ä–µ–∫—Ç–∞

/**
 * –ú–µ—Ç–æ–¥—ã —Å—Ç—Ä–æ–∫
 */

const str = '–ü—Ä–∏–≤–µ—Ç';
console.log(str.length); // 6

const str = '–ü—Ä–∏–≤–µ—Ç';

// –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª
console.log(str[0]); // –ü
console.log(str.at(0)); // –ü

// –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
console.log(str[str.length - 1]); // —Ç
console.log(str.at(-1)); // —Ç

/**
 * String.indexOf(searchString: string, position?: number | undefined): number
 */

const str = '—á–µ–ª–æ–≤–µ–∫ —á–µ–ª–æ–≤–µ–∫—É –∫–µ–∫'

console.log(str.indexOf('—á–µ–ª–æ–≤–µ–∫')); // 0
console.log(str.indexOf('–ß–µ–ª–æ–≤–µ–∫')); // -1


console.log(str.indexOf('—á–µ–ª–æ–≤–µ–∫', 1)); // 8
/**
 *   –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –æ—Ç—Å—é–¥–∞
 *   v
 *  012345678
 * '—á–µ–ª–æ–≤–µ–∫ —á–µ–ª–æ–≤–µ–∫—É –∫–µ–∫'
 *          ^         
 */


const str = '—á–µ–ª–æ–≤–µ–∫ —á–µ–ª–æ–≤–µ–∫—É –∫–µ–∫'

console.log(str.includes('–∫–µ–∫')); // true
console.log(str.includes('–ª–æ–ª')); // false

console.log(str.includes('—á–µ–ª', 11)); // false

console.log(str.startsWith('—á–µ–ª')); // true
console.log(str.endsWith('–µ–∫')); // true


"–ª–æ–ª".toUpperCase(); // –õ–û–õ
"–ø–†–∏–í–µ–¢–∏–ö–∏".toLowerCase(); // –ø—Ä–∏–≤–µ—Ç–∏–∫–∏

const str = '—á–µ–ª–æ–≤–µ–∫ —á–µ–ª–æ–≤–µ–∫—É –∫–µ–∫';

console.log(str.slice(0, 3)); // —á–µ–ª
console.log(str.slice(0, 1)); // —á

console.log(str.slice(8)); // —á–µ–ª–æ–≤–µ–∫—É –∫–µ–∫

console.log(str.slice(-6, -1)); // –∫—É –∫–µ


const str = '—á–µ–ª–æ–≤–µ–∫ —á–µ–ª–æ–≤–µ–∫—É –∫–µ–∫';

console.log(str.substring(4, 7)); // –≤–µ–∫
console.log(str.substring(7, 4)); // –≤–µ–∫

console.log(str.slice(4, 7)); // –≤–µ–∫
console.log(str.slice(7, 4)); // "" (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)

/**
 * –ú–∞—Å—Å–∏–≤—ã
 */

const arr = new Array(); // –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
const arr = []; // –ª–∏—Ç–µ—Ä–∞–ª


const todo = ["–ø–æ–∫—É—à–∞—Ç—å", "–∫–æ–¥–∏—Ç—å", "–ø–æ—Å–ø–∞—Ç—å"];

console.log(todo[0]); // –ø–æ–∫—É—à–∞—Ç—å
console.log(todo[1]); // –∫–æ–¥–∏—Ç—å
console.log(todo[2]); // –ø–æ—Å–ø–∞—Ç—å

// –∑–∞–º–µ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
todo[0] = "–∫–æ–¥–∏—Ç—å";
console.log(todo); // –∫–æ–¥–∏—Ç—å, –∫–æ–¥–∏—Ç—å, –ø–æ—Å–ø–∞—Ç—å

// –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ—â—ë –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
todo[3] = "–µ—â—ë –ø–æ—Å–ø–∞—Ç—å"; // (!) —Ç–∞–∫ –º–æ–∂–Ω–æ, –Ω–æ –ª—É—á—à–µ —Ç–∞–∫ –Ω–µ –¥–µ–ª–∞—Ç—å
console.log(todo); // –∫–æ–¥–∏—Ç—å, –∫–æ–¥–∏—Ç—å, –ø–æ—Å–ø–∞—Ç—å, –µ—â—ë –ø–æ—Å–ø–∞—Ç—å

// —á–∏—Å–ª–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ
console.log(todo.length); // 4

// –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
console.log(todo[todo.length - 1]); // –µ—â—ë –ø–æ—Å–ø–∞—Ç—å
console.log(todo.at(-1)); // —Ç–æ –∂–µ —Å–∞–º–æ–µ, —Ç–æ–ª—å–∫–æ –Ω–∞–¥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –µ—â—ë –ø–∞—Ä—É –ª–µ—Ç


// –º–∞—Å—Å–∏–≤ - –æ–±—ä–µ–∫—Ç
const arr = [];

arr.length = 99999;
arr.kek = 'lol';
arr[25] = 42;

// –º–µ—Ç–æ–¥—ã

const pets = ['üêº', 'üêà', 'üêï'];

pets.push('üêá');    // ['üêº', 'üêà', 'üêï', 'üêá']
pets.pop();         // ['üêº', 'üêà', 'üêï']
pets.unshift('üêá'); // ['üêá', 'üêº', 'üêà', 'üêï']
pets.shift();       // ['üêº', 'üêà', 'üêï']

const pets = ['üêº', 'üêà', 'üêï'];
pets.unshift('üêá');

// (*)  ['üêº', 'üêà', 'üêï', _–ø—É—Å—Ç–æ_]

// (1)  ['üêº', 'üêà', _–ø—É—Å—Ç–æ_, 'üêï']
// (2)  ['üêº', _–ø—É—Å—Ç–æ_, 'üêà', 'üêï']
// (3)  [_–ø—É—Å—Ç–æ_, 'üêº', 'üêà', 'üêï']

// (**) ['üêá', 'üêº', 'üêà', 'üêï']

const pets = ['üê∏', 'üêº', 'üêà'];

delete pets[1];
console.log(pets[1]);     // undefined - –ø–æ—Ö–æ–∂–µ, —á—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ

console.log(pets.length); // 3 - –Ω–µ—Ç, –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
console.log(pets);        // ['üê∏', empty, 'üêà']  - —Ç–æ—á–Ω–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ

// –°–∏–Ω—Ç–∞–∫—Å–∏—Å
arr.splice(–Ω–∞—á–∞–ª–æ[, —Å–∫–æ–ª—å–∫–æ–£–¥–∞–ª–∏—Ç—å, —ç–ª–µ–º–µ–Ω—Ç1, ..., —ç–ª–µ–º–µ–Ω—ÇN])


const pets = ['üêº', 'üêà', 'üêï', 'üêá'];

// –Ω–∞—á–∏–Ω–∞—è —Å –∏–Ω–¥–µ–∫—Å–∞ 1, —É–¥–∞–ª–∏—Ç—å 1 —ç–ª–µ–º–µ–Ω—Ç
pets.splice(1, 1);
console.log(pets); // ['üêº', 'üêï', 'üêá']

// —É–¥–∞–ª–∏—Ç—å 2 –ø–µ—Ä–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –∑–∞–º–µ–Ω–∏—Ç—å –∏—Ö –¥—Ä—É–≥–∏–º–∏ —Ç—Ä–µ–º—è
const deleted = pets.splice(0, 2, 'üê∏', 'ü¶©', 'ü¶Å');
console.log(pets); // ['üê∏', 'ü¶©', 'ü¶Å', 'üêá'];

// splice –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
console.log(deleted); // ['üêº', 'üêï']


// –°–∏–Ω—Ç–∞–∫—Å–∏—Å
arr.slice(–Ω–∞—á–∏–Ω–∞—è_—Å_–∏–Ω–¥–µ–∫—Å–∞, –ø–æ_–∏–Ω–¥–µ–∫—Å__–Ω–µ_–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ);


const arr = ["–Ø", "–æ—á–µ–Ω—å", "–ª—é–±–ª—é", "JavaScript"];
//            0      1        2          3

const arr1 = arr.slice(1, 3); // –æ—á–µ–Ω—å, –ª—é–±–ª—é
const arr2 = arr.slice(-2); // –ª—é–±–ª—é, JavaScript



// –°–∏–Ω—Ç–∞–∫—Å–∏—Å
arr.concat(–º–∞—Å—Å–∏–≤, –Ω–æ–≤—ã–π_—ç–ª–µ–º–µ–Ω—Ç_–∏–ª–∏_–º–∞—Å—Å–∏–≤);


const arr = ['üêº', 'üêà'];

const newArr = arr.concat(['üê∏', 'ü¶©'], 'üêï', ['ü¶Å', 'üêá']);

console.log(newArr); // ['üêº', 'üêà', 'üê∏', 'ü¶©', 'üêï', 'ü¶Å', 'üêá']


// indexOf
const pets = ['üêº', 'üêà', 'üê∏', 'ü¶©', 'üêï', 'ü¶Å', 'üêá'];

pets.indexOf('üêà'); // 1

// includes
const pets = ['üêº', 'üêà', 'üê∏', 'ü¶©', 'üêï', 'ü¶Å', 'üêá'];

pets.includes('üêà'); // true


// find

// –°–∏–Ω—Ç–∞–∫—Å–∏—Å
let result = arr.find(function (item, index, array) {
  // –µ—Å–ª–∏ true - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏ –ø–µ—Ä–µ–±–æ—Ä –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è
  // –µ—Å–ª–∏ –≤—Å–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å –ª–æ–∂–Ω—ã–º–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è undefined
});

const profiles = [
  { id: 0, name: 'Pete' },
  { id: 1, name: 'John' },
  { id: 2, name: 'Jane' },
];

const profile = profiles.find(profile => profile.id === 2);

console.log(profile); // {id: 2, name: 'Jane'}


// forEach

const pets = ['üêº', 'üêà', 'üê∏', 'ü¶©', 'üêï', 'ü¶Å', 'üêá'];

pets.forEach((pet, idx, pets) => {
  console.log(`–ü–∏—Ç–æ–º–µ—Ü —Å –∏–Ω–¥–µ–∫—Å–æ–º ${idx} - —ç—Ç–æ ${pet}, –≤ —Å–ø–∏—Å–∫–µ ${pets}`)
});

// –°–∏–Ω—Ç–∞–∫—Å–∏—Å
arr.sort(function (a, b) {
  // –µ—Å–ª–∏ –≤–µ—Ä–Ω—É—Ç—å —á–∏—Å–ª–æ > 0, —Ç–æ a > b
  // –µ—Å–ª–∏ –≤–µ—Ä–Ω—É—Ç—å —á–∏—Å–ª–æ < 0, —Ç–æ a < b
  // –µ—Å–ª–∏ –≤–µ—Ä–Ω—É—Ç—å 0, —Ç–æ a = b

  // –µ—Å–ª–∏ a, b —á–∏—Å–ª–∞, —Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç `return a - b`;
})

const profiles = [
  { id: 0, name: 'Pete', likes: 42 },
  { id: 1, name: 'John', likes: 15 },
  { id: 2, name: 'Jane', likes: 101 },
  { id: 3, name: 'Eva', likes: 95 },
];

profiles.sort((p1, p2) => p2.likes - p1.likes);

// filter

// –°–∏–Ω—Ç–∞–∫—Å–∏—Å
arr.filter(function (—ç–ª–µ–º–µ–Ω—Ç) {
  // –µ—Å–ª–∏ –≤–µ—Ä–Ω—É—Ç—å `true`, —Ç–æ —ç–ª–µ–º–µ–Ω—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤–µ
  // –µ—Å–ª–∏ –≤–µ—Ä–Ω—É—Ç—å `false`, —Ç–æ —ç–ª–µ–º–µ–Ω—Ç –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω
});


const profiles = [
  { id: 0, name: 'Pete', likes: 42 },
  { id: 1, name: 'John', likes: 15 },
  { id: 2, name: 'Jane', likes: 101 },
  { id: 3, name: 'Eva', likes: 95 },
];

profiles.filter(profile => profile.likes > 50);

// map

// –°–∏–Ω—Ç–∞–∫—Å–∏—Å
arr.filter(function (—ç–ª–µ–º–µ–Ω—Ç) {
  // —Ç–æ, —á—Ç–æ –º—ã –≤–µ—Ä–Ω—ë–º, –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤–º–µ—Å—Ç–æ —ç–ª–µ–º–µ–Ω—Ç–∞
});

const profiles = [
  { id: 0, name: 'Pete', likes: 42 },
  { id: 1, name: 'John', likes: 15 },
  { id: 2, name: 'Jane', likes: 101 },
  { id: 3, name: 'Eva', likes: 95 },
];

profiles.map(profile => profile.likes);
// 42, 15, 101, 95


// reduce

// –°–∏–Ω—Ç–∞–∫—Å–∏—Å
arr.reduce(
  function (–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä, —ç–ª–µ–º–µ–Ω—Ç, –º–∞—Å—Å–∏–≤) {
    // —Ç–æ, —á—Ç–æ –º—ã –≤–µ—Ä–Ω—ë–º, –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
  },
  –Ω–∞—á–∞–ª—å–Ω–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ_–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞
);

const profiles = [
  { id: 0, name: 'Pete', likes: 42 },
  { id: 1, name: 'John', likes: 15 },
  { id: 2, name: 'Jane', likes: 101 },
  { id: 3, name: 'Eva', likes: 95 },
];

profiles.reduce((acc, profile) => acc + profile.likes, 0);
// 253 (= 42 + 15 + 101 + 95)

// reverse

const arr = [1, 2, 3, 4, 5];
arr.reverse();

console.log(arr); // [5, 4, 3, 2, 1];

// split/join

const str = "üêº, üêà, üê∏, ü¶©, üêï, ü¶Å, üêá";

const arr = str.split(', ');
console.log(arr); // ['üêº', 'üêà', 'üê∏', 'ü¶©', 'üêï', 'ü¶Å', 'üêá']

const newStr = arr.join('; ');
console.log(newStr); // üêº; üêà; üê∏; ü¶©; üêï; ü¶Å; üêá

// some / every

const profiles = [
  { id: 0, name: 'Pete', blocked: false },
  { id: 1, name: 'John', blocked: true },
  { id: 2, name: 'Jane', blocked: false },
  { id: 3, name: 'Eva', blocked: false },
];

const isBlocked = (profile) => profile.blocked;

const hasBlocked = profiles.some(isBlocked); // true
const allBlocked = profiles.every(isBlocked); // false


/**
 * Destructuring
 */
const frame = ["100px", "250px"];

const width = frame[0];
const height = frame[0];

const frame = ["100px", "250px"];

/**
 *    ["100px", "250px"]
 *        v        v        */
const [width, height] = frame;

console.log(width); // 100px
console.log(height); // 250px

const list = ['–ò–≤–∞–Ω–æ–≤', '–ü–µ—Ç—Ä–æ–≤', '–í–æ–≤–∞–Ω', '–°–∏–¥–æ—Ä–æ–≤']

const [first, second, , fourth] = list;
/**                  ^
 *                  (!)
 */

console.log(fourth); // –°–∏–¥–æ—Ä–æ–≤

const list = ['–ò–≤–∞–Ω–æ–≤', '–ü–µ—Ç—Ä–æ–≤', '–í–æ–≤–∞–Ω', '–°–∏–¥–æ—Ä–æ–≤']

const [first, second] = list;

console.log(second); // –ü–µ—Ç—Ä–æ–≤


const list = ['–ò–≤–∞–Ω–æ–≤', '–ü–µ—Ç—Ä–æ–≤', '–í–æ–≤–∞–Ω', '–°–∏–¥–æ—Ä–æ–≤']

const [first, second, ...rest] = list;

console.log(rest); // ['–í–æ–≤–∞–Ω', '–°–∏–¥–æ—Ä–æ–≤']

const [width, height] = [];

console.log(width); // undefined
console.log(height); // undefined


const [width = '0px', height = '0px'] = [];

console.log(width); // 0px
console.log(height); // 0px

// –û–±—ä–µ–∫—Ç—ã

const profile = {
  name: 'John',
  age: 42,
  isAdmin: false,
}

const { name, ...other } = profile;

console.log(other); // { age: 42, isAdmin: false }


const profile = {}

// –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const { name = 'Unknown' } = profile;
console.log(name);

// –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
const { name: userName = 'Unknown' } = profile;
console.log(userName);


const profile = {
  name: 'John',
  age: 42,
  isAdmin: false,
}

const { name } = profile;

console.log(name); // John


const profile = {
  name: 'John',
  age: 42,
  avatar: 'üë®',
  isAdmin: true,
}

function renderProfile({
  name = 'Unknown',
  age = '-',
  avatar = 'üë§',
  isAdmin
}) {
  console.log(`
    ${avatar}

    Name: ${name}
    Age: ${age}

    ${isAdmin && '‚≠ê Super User!'}
  `)
}

renderProfile(profile);


const map = new Map();

map.set("1", "str1");    // —Å—Ç—Ä–æ–∫–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞
map.set(1, "num1");      // —Ü–∏—Ñ—Ä–∞ –∫–∞–∫ –∫–ª—é—á
map.set(true, "bool1");  // –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –∫–ª—é—á

// –ø–æ–º–Ω–∏—Ç–µ, –æ–±—ã—á–Ω—ã–π –æ–±—ä–µ–∫—Ç Object –ø—Ä–∏–≤–æ–¥–∏—Ç –∫–ª—é—á–∏ –∫ —Å—Ç—Ä–æ–∫–∞–º?
// Map —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–∏–ø –∫–ª—é—á–µ–π, —Ç–∞–∫ —á—Ç–æ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è 2 —Ä–∞–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è:
alert(map.get(1));   // "num1"
alert(map.get("1")); // "str1"

alert(map.size);     // 3



for (idx in arr) { }
for (element of arr) { }
for (let idx = 0; i < arr.length; i++) { }

arr.forEach();
arr.reduce();
arr.map();
arr.filter();
arr.sort();
arr.some();
arr.every();

const prices = {
  banana: 1,
  orange: 2,
  meat: 4,
};

const doubledPrices = Object.fromEntries(
  // –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –º–∞—Å—Å–∏–≤
  // –∑–∞—Ç–µ–º map
  // –∑–∞—Ç–µ–º fromEntries –æ–±—Ä–∞—Ç–Ω–æ –æ–±—ä–µ–∫—Ç
  Object.entries(prices).map(
    ([key, value]) => [key, value * 2]
  )
);

console.log(doubledPrices.meat); // 8


const more = ['four', 'five'];

const all = ['one', 'two', 'three', ...more]; // ['one', 'two', 'three', 'four', 'five']
const all = ['one', ...more, 'two', 'three']; // ['one', 'four', 'five', 'two', 'three']


const arr = ['one', 'two', 'three'];
const more = ['four', 'five'];

const all = [...arr, ...more]; // ['one', 'two', 'three', 'four', 'five']


const profile1 = { id: 1 };
const profile2 = { id: 2 };
const profile3 = { id: 3 };
const profile4 = { id: 4 };
const profile5 = { id: 5 };

const admins = [profile1, profile2, profile3];
const moderators = [profile4, profile5];

const adminsAndModerators = [...admins, ...moderators];

console.log(adminsAndModerators); // [{id: 1}, {id: 2}, {id: 3}, {id: 4}, {id: 5}]

profile2.id = 42;

console.log(adminsAndModerators); // [{id: 1}, {id: 42}, {id: 3}, {id: 4}, {id: 5}]


const priveleges = {
  isAdmin: true,
  isModerator: false,
};

const profile = {
  name: 'John',
  age: 42,
  ...priveleges
};

console.log(profile);
// {name: "John", age: 42, isAdmin: true, isModerator: false}



const privileges = {
  isAdmin: true,
};

const profile = {
  name: 'John',
  age: 42,
  isAdmin: false,
  ...privileges
};

console.log(profile.isAdmin); // true



const privileges = {
  isAdmin: true,
};

const profile = {
  ...privileges,
  name: 'John',
  age: 42,
  isAdmin: false,
};

console.log(profile.isAdmin); // false


const DEFAULT_PROFILE = {
  name: 'Unknown',
  age: '-',
  isAdmin: false
}

const profileData = {
  name: '–ò–≤–∞–Ω',
}

const profile = {
  ...DEFAULT_PROFILE,
  ...profileData,
}


const DEFAULT_PRIVILEGES = {
  isAdmin: false,
};

const DEFAULT_PROFILE = {
  name: 'Unknown',
  age: '-',
  privileges: DEFAULT_PRIVILEGES,
};

const profile = {
  ...DEFAULT_PROFILE,
  name: '–ò–≤–∞–Ω',
};

console.log(profile.privileges.isAdmin); // false

DEFAULT_PRIVILEGES.isAdmin = true; // —Å–ª—É—á–∞–π–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ

console.log(profile.privileges.isAdmin);
// true - –ø–æ–º–µ–Ω—è—é—Ç—Å—è –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç,
// –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –±—ã–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ø–æ —Å—Å—ã–ª–∫–µ


function sum(first, second, ...rest) {
  console.log(first);
  console.log(second);
  console.log(rest);
};

sum(1, 2, 3, 4, 5, 6, 7);
/**
 * 1
 * 2
 * [3, 4, 5, 6, 7]
 */


function sum(...args) {
  return args.reduce((sum, arg) => sum + arg, 0)
}

console.log(sum(2, 2));                 // 4
console.log(sum(2, 5, 5));              // 12
console.log(sum(2, 5, 5, 5, 5, 5, 5));  // 32



function sum(...args) {
  return args.reduce((sum, arg) => sum + arg, 0)
}

console.log(sum(2, 2));    // 4
console.log(sum(2, 5, 5)); // 12


const args = [2, 5, 5];
// –ö–∞–∫ –ø–µ—Ä–µ–¥–∞—Ç—å `args` –≤ sum() ?


function sum(...args) {
  return args.reduce((sum, arg) => sum + arg, 0)
}

console.log(sum(2, 2));    // 4
console.log(sum(2, 5, 5)); // 12


const args = [2, 5, 5];

sum(...[2, 5, 5]);
// –ø–æ–ª—É—á–∞–µ–º:
// sum(2, 5, 5);



function sum(...args) {
  return args.reduce((sum, arg) => sum + arg, 0)
}

console.log(sum(2, 2));    // 4
console.log(sum(2, 5, 5)); // 12


const args = [2, 5, 5];
console.log(sum(...args));

let set = new Set();

let john = { name: "John" };
let pete = { name: "Pete" };
let mary = { name: "Mary" };

// —Å—á–∏—Ç–∞–µ–º –≥–æ—Å—Ç–µ–π, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
set.add(john);
set.add(pete);
set.add(mary);
set.add(john);
set.add(mary);

// set —Ö—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ 3 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è
alert(set.size); // 3

for (let user of set) {
  alert(user.name); // John (–ø–æ—Ç–æ–º Pete –∏ Mary)
}